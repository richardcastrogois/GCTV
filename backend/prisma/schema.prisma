generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[] // Relação com Client
  discounts PlanPaymentMethodDiscount[] // Relação com a nova tabela de taxas
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[] // Relação com Client
  discounts PlanPaymentMethodDiscount[] // Relação com a nova tabela de taxas
}

model PlanPaymentMethodDiscount {
  id             Int           @id @default(autoincrement())
  planId         Int
  paymentMethodId Int
  discount       Float         @default(0) // Taxa de desconto para a combinação plano/forma de pagamento
  plan           Plan          @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentMethod  PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  @@unique([planId, paymentMethodId]) // Garante que cada combinação plano/forma de pagamento é única
}

model Client {
  id             Int           @id @default(autoincrement())
  fullName       String
  email          String        @unique
  phone          String?
  planId         Int           @default(999) // ID de "Outros" como padrão
  plan           Plan          @relation(fields: [planId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  paymentMethodId Int           @default(999) // ID de "Outros" como padrão
  paymentMethod  PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  dueDate        DateTime
  grossAmount    Float
  netAmount      Float
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}