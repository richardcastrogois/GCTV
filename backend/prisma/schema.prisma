generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  client    Client?
}

model PaymentMethod {
  id        Int                         @id @default(autoincrement())
  name      String                      @unique
  isActive  Boolean                     @default(true)
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  clients   Client[]
  discounts PlanPaymentMethodDiscount[]

  @@index([isActive])
}

model Plan {
  id        Int                         @id @default(autoincrement())
  name      String                      @unique
  isActive  Boolean                     @default(true)
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  clients   Client[]
  discounts PlanPaymentMethodDiscount[]

  @@index([isActive])
}

model PlanPaymentMethodDiscount {
  id              Int           @id @default(autoincrement())
  planId          Int
  paymentMethodId Int
  discount        Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  plan            Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, paymentMethodId])
  @@index([planId])
  @@index([paymentMethodId])
}

model Client {
  id                     Int           @id @default(autoincrement())
  fullName               String
  email                  String
  phone                  String?
  dueDate                DateTime
  grossAmount            Float
  netAmount              Float
  isActive               Boolean       @default(true)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  paymentMethodId        Int           @default(999)
  planId                 Int           @default(999)
  observations           String?
  userId                 Int           @unique
  paymentHistory         Json?         @default("[]")
  visualPaymentConfirmed Boolean       @default(false)
  paymentMethod          PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: SetDefault)
  plan                   Plan          @relation(fields: [planId], references: [id], onDelete: SetDefault)
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([dueDate])
}
