generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  client    Client?
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[]
  discounts PlanPaymentMethodDiscount[]

  @@index([isActive])
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clients   Client[]
  discounts PlanPaymentMethodDiscount[]

  @@index([isActive])
}

model PlanPaymentMethodDiscount {
  id             Int           @id @default(autoincrement())
  planId         Int
  paymentMethodId Int
  discount       Float         @default(0)
  plan           Plan          @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentMethod  PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([planId, paymentMethodId])
  @@index([planId])
  @@index([paymentMethodId])
}

model Client {
  id                 Int           @id @default(autoincrement())
  fullName           String
  email              String
  phone              String?
  planId             Int           @default(999)
  plan               Plan          @relation(fields: [planId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  paymentMethodId    Int           @default(999)
  paymentMethod      PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  dueDate            DateTime
  grossAmount        Float
  netAmount          Float
  isActive           Boolean       @default(true)
  observations       String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  userId             Int           @unique
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentHistory     Json?         @default("[]")
  visualPaymentConfirmed Boolean @default(false)         

  @@index([isActive])
  @@index([dueDate])
}
// For√ßar novo build 2025-0708